<?php
/**
 * @file
 * Tests for cordis_feature.module (ECWeb MULTISITE QA).
 */

/**
 * Testing the "Cordis Feature" feature compliance with requrements.
 */
class CordisFeatureWebTestCase extends DrupalWebTestCase {

  /**
   * Returns test information.
   *
   * @return array
   *   Information array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Cordis Feature',
      'description' => 'Test the Cordis Feature to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   *
   * TestFile <featurename>.info.
   */
  public function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information.
    // Ex core = 7.x
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information.
    // Ex: php = 5.2.4
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:2
    $this->assertEqual($info['features']['features_api'][0], 'api:2', 'The Feature API dependency is available.');

    // Remove menu dependencies:
    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"
      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  /**
   * Test install file.
   */
  public function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}

/**
 * @file
 * Tests CordisFeatureTestCase.
 */
class CordisFeatureParserTestCase extends FeedsWebTestCase {

  protected $adminUser;

  /**
   * Set up test.
   */
  public function setUp() {

    $https_proxy = array(
      'dae',
      '127.0.0.1',
      'localhost',
      'fpfis-dev.net1.cec.eu.int',
      'intragate.ec.europa.eu',
      '127.0.0.1',
      'localhost',
      'biguonia.cc.cec.eu.int',
      '158.167.39.277',
      'dbprod-dmrz.jrc.org',
      '139.191.254.129',
      'intragate.acceptance.ec.europa.eu',
      'intragate.ec.europa.eu',
    );
    variable_set('proxy_exceptions', $https_proxy);

    // This feature must set up all the dependencies.
    DrupalWebTestCase::setUp(
      array('apachesolr',
        'nodequeue',
        'smartqueue',
        'block',
        'cordis',
        'feeds',
        'date',
        'feeds_xpathparser',
        'cordis_feature',
        'views',
      ),
      array('administer blocks')
    );

    $permissions[] = 'access content';
    $permissions[] = 'administer site configuration';
    $permissions[] = 'administer content types';
    $permissions[] = 'administer nodes';
    $permissions[] = 'bypass node access';
    $permissions[] = 'administer taxonomy';
    $permissions[] = 'administer users';
    $permissions[] = 'administer feeds';

    // Create an admin user and log in.
    $this->adminUser = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->adminUser);

    // Set the front page to show 30 nodes.
    $edit = array('default_nodes_main' => 30);
    $this->drupalPost('admin/config/system/site-information', $edit, 'Save configuration');

    // Generalize across my version of feeds and the standard one.
    $items = feeds_ui_menu();
    if (isset($items['admin/structure/feeds/%feeds_importer/edit'])) {
      $this->feeds_base = 'admin/structure/feeds';
    }
    else {
      $this->feeds_base = 'admin/structure/feeds/edit';
    }

    // Set cordis item to be promoted on front-page for test assertion.
    // Set the teaser length display to unlimited otherwise tests looking for
    // text on nodes will fail.
    $edit = array('node_options[promote]' => 1);
    $this->drupalPost('admin/structure/types/manage/project', $edit, 'Save content type');
  }

  /**
   * Get info.
   *
   * @return array
   *   Type.
   */
  public static function getInfo() {
    return array(
      'name' => 'Cordis Import Test',
      'description' => 'Test if the custom XML parser is doing some import.',
      'group' => 'dae',
    );
  }

  /**
   * Tests the functionality of the Connect Menus Block.
   */
  public function test() {

    $importer_url = $this->feeds_base . '/cordis/settings/FeedsXPathParserXML';
    $this->drupalGet($importer_url);
    // Test import.
    $path = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'cordis_feature') . '/tests/xml/';

    $nid = $this->createFeedNode('cordis', $path . 'test_xml.xml', 'Testing XPath XML Parser', 'cordis_importer');

    // We use an atom feed so that we can test that default namespaces
    // are being applied appropriately.
    $this->importURL('cordis', $path . 'test_xml.xml');
    $this->assertText('Created');

    // Assert accuracy of aggregated content.
    $this->drupalGet('node');

    $imported_nid = $nid + 1;

    // Check that cordis homepage is created.
    $this->assertResponse('200');
    $this->drupalGet('node/' . $imported_nid . '');
    // Checking that the mapping and relations to vocabularies are resolved.
    $this->assertText('REDUCTION');
    $this->assertText('100009');
    $this->assertText('288254');
    $this->assertText('ICT-2011.6.6');
  }

}
