<?php
/**
 * @file
 * Helper functions for the INEA migration.
 */

function inea_migration_menu() {
  $items = array();

  $items['admin/content/update-links'] = array(
    'title'            => 'Bulk update INEA links',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('inea_migration_update_links_form'),
    'access arguments' => array('administer nodes'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 11,
  );

  return $items;
} 
 
function inea_migration_update_links_form(){
  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => t('This will update all old Odeum links and change them to the current path system. There will be no coming back. Make sure to make a database backup before continuing.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  return $form;
}

function inea_migration_update_links_form_submit($form, &$form_state){

  $result = db_select('node')
      ->fields('node', array('nid'))
      //->range(0,1)
      ->execute()
      ->fetchAll();

  $operations = array();

  foreach ($result as $row) {
      $nid = $row->nid;
      $operations[] = array('_inea_migration_update_links_node', array($nid));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => '_inea_migration_update_links_finished',
  );
  batch_set($batch);
  batch_process();
}

function _inea_migration_update_links_node($nid, &$context){
  if (empty($context['sandbox'])) {
    $text_fields = array(
      'body',
      'field_project_summary',
      'field_project_other_info',
      'field_is_summary',
      'field_is_other_info',
    );
    $context['sandbox']['textfields'] = $text_fields;
  }
  $node = node_load($nid);
  foreach ($context['sandbox']['textfields'] as $textfield) {
    if (!empty($node->$textfield)){
      $field = $node->$textfield;
      $content = $field['und'][0]['value'];
      $field['und'][0]['value'] = _inea_migration_update_links($content);
      $node->$textfield = $field;
    }
  }
  node_save($node);
  $context['message'] = t('Loading node "@title"', array('@title' => $node->title));
}

function _inea_migration_update_links_finished($success, $results, $operations) {
  drupal_set_message("DONE");
}

function _inea_migration_update_links($content) {
  $match = FALSE;
  @$dom = new DOMDocument(); 
  $dom->loadHtml(mb_convert_encoding($content, 'HTML-ENTITIES', 'UTF-8'));

  // Get the links.
  $links = $dom->getElementsByTagName('a');
  foreach ($links as $link) {
    $id = trim($link->getAttribute('id'),"@");
    if (preg_match('/PAGE[0-9]{15}/', $id)) {
      $match = TRUE;
      $old_id = substr($link->getAttribute('id'), 4);
      $nid = _inea_migration_load_node_by_old_id($old_id);
      if($nid) {
         $href = '/' . drupal_get_path_alias('node/' . $nid);
         $link->removeAttribute('id');
      }
      else {
        $href = '/NO/OLD/NID/FOUND';
      }
      $link->setAttribute('href', $href);
    }
  }
    // Get the new HTML
  $new_content = $dom->saveHTML();

  // Strip out the tags that loadHTML() introduces to get the clean HTML.
  $patterns = array("/^\<\!DOCTYPE.*?<html><body>/si", "!</body></html>$!si");
  $new_content = preg_replace($patterns, '', $new_content);
  return $new_content;
}

/**
 * Helper function to retrieve a node based on the old INEA id.
 */
function _inea_migration_load_node_by_old_id($old_id) {
  return db_select('field_data_field_content_migration_info', 'migration_info')
    ->fields('migration_info', array('entity_id'))
    ->condition('field_content_migration_info_value', $old_id, '=')
    ->execute()
    ->fetchField();
}

/**
 * Helper function to get the mlid of a node.
 */
function _inea_migration_get_node_mlid($nid, $menu_name) {
  return db_select('menu_links', 'ml')
    ->condition('ml.link_path', 'node/' . $nid)
    ->condition('ml.menu_name', $menu_name)
    ->fields('ml', array('mlid'))
    ->range(0, 1)
    ->execute()
    ->fetchField();
}

/**
 * Helper function to create a new file entity.
 */
function _inea_migration_create_file($file, $uid) {
  if (!is_object($file)) {
    $uri = $file;
    $file = new stdclass();
    $file->uri = $uri;
    $file->filename = drupal_basename($uri);
  }

  $existing_files = file_load_multiple(array(), array('uri' => $file->uri));
  if (count($existing_files)) {
    $existing = reset($existing_files);
    return $existing->fid;
  }
  $image = new stdclass();
  $image->uri = $file->uri;
  $image->uid = $uid;
  $image->filename = $file->filename;
  $image->filemime = file_get_mimetype(urldecode($file->uri));
  $image->status = FILE_STATUS_PERMANENT;
  $image->type = 'image';
  $image = file_save($image);
  return $image->fid;
}

function _inea_migration_get_mlid($path){
  $menu_info = db_select('menu_links' , 'ml')
  ->condition('ml.link_path' , $path)
  ->fields('ml', array('mlid', 'plid'))
  ->execute()
  ->fetchAll();
  foreach($menu_info as $key => $value) {
    $mlid[] = $menu_info[$key]->mlid;
  }
  return $mlid;
}