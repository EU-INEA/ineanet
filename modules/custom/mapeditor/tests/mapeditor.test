<?php

/**
 * @file
 * Tests NUTS regions tools modules.
 */

/**
 * Performs test on the mapeditor module.
 *
 * @todo improve to test more.
 */
class MapeditorTestCase extends MapeditorDrupalWebTestCase {

  // $adminUser is a user with permission to administer blocks.
  protected $adminUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapeditor: content type',
      'description' => 'Test the Mapeditor content type',
      'group' => 'Mapeditor',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array(
      'mapeditor',
      'mapmock',
    ));

    // Disables apachesolr search to prevent time outs locally.
    module_disable(array('apachesolr_search'), TRUE);

    variable_set('mapeditor_node_types', array('den' => 'den'));
    variable_set('mapeditor_vocabularies', array('topics' => 'topics'));

    $this->adminUser = $this->drupalCreateUser(
      array(
        'access content',
        'administer users',
        'administer site configuration',
        'administer nodes',
        'administer content types',
        'create mapeditor_map content',
      )
    );

    $this->testNumber = 987;
    $this->testWord = 'Scallywag';
    $this->testSentence = 'Jolly boat long boat Barbary Coast chandler bucko matey';
    $this->testParagraph = 'Draught parrel Arr squiffy gangplank hulk fire ship coxswain lanyard aft. Scallywag hands coxswain salmagundi jolly boat long boat Barbary Coast chandler bucko matey. Wench boom nipper Shiver me timbers fluke bilged on her anchor bilge lateen sail gunwalls belaying pin.';

  }

  /**
   * Test node access permissions.
   */
  protected function testContentTypesAvailability() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet("admin/structure/types");
    $this->assertText('The map type allows creating a map in simple steps.', 'Map type description found on the types admin page.');
    $this->drupalGet('admin/structure/types/manage/mapeditor-map');
    $this->assertResponse(200, 'Content type Mapeditor Map is available');
    $this->drupalLogout();
  }

  /**
   * Tests the availability of (some) fields in the map node form.
   */
  public function testMapeditorNode() {
    $this->drupalLogin($this->adminUser);

    // Checks is Mapedit map node form is OK.
    $this->drupalGet("node/add/mapeditor-map");
    $this->assertResponse(200, 'Node form Mapeditor Map is available');
    $this->assertField('title', 'Title field is available');
    $this->assertField('edit-initialzoom', 'Initial zoom field is available');
    $this->assertField('edit-minzoom', 'Min zoom field is available');
    $this->assertField('edit-maxzoom', 'Max zoom field is available');
    $this->assertField('show', 'Show pop-up field is available');
    $this->assertField('edit-popin', 'Pop-in field is available');
    $this->assertField('lat', 'Center lat field is available');
    $this->assertField('fitbounds', 'Fitbounds field is available');
    $this->assertField('edit-lon', 'Center lon field is available');
    $this->assertField('height', 'Height field is available');
    $this->assertField('tile_layer', 'Tile layer field is available');
    $this->assertField('attribution', 'Attribution field is available');

    // Creates a Mapeditor node.
    $map_definition = array(
      'popup' => array(
        'show' => 1,
        'popin' => 1,
      ),
      'icon' => array(
        'icon' => 'orange',
      ),
      'tile_layer' => array(
        'tile_layer' => 'osmec',
      ),
      'height' => array(
        'height' => 240,
      ),
      'center' => array(
        'lat' => -66.66,
        'lon' => 66.66,
        'fitbounds' => 0,
      ),
      'zoom' => array(
        'initialZoom' => 3,
        'minZoom' => 2,
        'maxZoom' => 6,
      ),
      'attribution' => array(
        'attributionControl' => 1,
        'attribution' => $this->testSentence,
      ),
      'source_data' => 'csv',
      'data_type' => 'geofield',
      'show_map_definition' => 1,
      'mapeditor_content_type' => 0,
    );

    // @codingStandardsIgnoreStart
    $csv = '59.325117,18.071094,"Bowsprit capstan","Line bring a spring",http://example.com
40.844116,14.2423,"Sink me case shot","Ahoy hornswaggle",http://example.com
37.884487,-4.779502,"Brethren of the Coast","Nelsons folly",http://example.com
53.902339,27.561902,"Furl fluke","Quarter marooned, measured",http://example.com
51.226307,4.466024,"Buccaneer coxswain","Mizzen hearties",http://example.com
';
    // @codingStandardsIgnoreEnd

    $settings = array(
      'type' => 'mapeditor_map',
      'title' => $this->testSentence,
      'body' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $this->testParagraph,
            'format' => filter_default_format(),
          ),
        ),
      ),
      'mapeditor_map_definition' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => drupal_json_encode($map_definition),
          ),
        ),
      ),
      'mapeditor_csv_data' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $csv,
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);
    $this->assertEqual($node->type, 'mapeditor_map');
    $this->assertEqual($node->comment, 2);

    // Creates a mapeditor map with insufficient data.
    $map_definition['source_data'] = 'csv';
    $map_definition['data_type'] = 'geofield';
    $map_definition['mapeditor_content_type'] = 'page';
    $settings = array(
      'type' => 'mapeditor_map',
      'mapeditor_map_definition' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => drupal_json_encode($map_definition),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet("node/" . $node->nid);
    $this->assertResponse(200, 'Insufficient data map has been created');

    // Checks for the common error message when the data is insufficient
    // to build a map.
    $this->assertText('Not enough information to build map', 'Error message for missing data found');

    // Logs out.
    $this->drupalLogout();
  }

  /**
   * Tests the availability of (some) fields in the map node form.
   */
  public function testMapeditorConfigForm() {
    $this->drupalLogin($this->adminUser);

    // Checks is Mapeditor map node form is OK.
    $this->drupalGet("admin/config/system/mapeditor/settings");
    $this->assertResponse(200, 'Mapeditor config form  is available');
    $this->assertField('webtools_environment', 'Webtools environment field is available');
    $this->assertText('Mapeditor data', 'mapeditor data fieldset is available');
    $this->assertField('mapeditor_node_types[den]', 'Pirate den checkbox is available');
    $this->assertField('mapeditor_show_unpublished', 'Show unpublished field is available');

    $edit['webtools_environment'] = 'https://europa.eu/webtools/load.js';
    $edit['mapeditor_show_unpublished'] = 1;
    $this->drupalPost('admin/config/system/mapeditor/settings', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved', 'Succesful confirmation message is found');

    // Logs out.
    $this->drupalLogout();
  }

  /**
   * Tests the availability of the mapeditor example pages.
   */
  public function testMapeditorExamplePages() {
    $this->drupalGet('mapeditor/example');
    $this->assertResponse(200, 'Mapeditor example page is available');
    $this->assertText('Example Page', 'Example page title found');
    $this->assertResponse(200, 'Mapeditor more example page is available');
    $this->drupalGet('mapeditor/example/more');
    $this->assertText('Example Page', 'More example page title found');
    $this->assertResponse(200, 'Mapeditor NUTS example page is available');
    $this->drupalGet('mapeditor/example/nuts');
    $this->assertText('NUTS example Page', 'NUTS example page title found');
  }

}
