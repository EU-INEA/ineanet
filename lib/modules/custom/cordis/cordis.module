<?php
/**
 * @file
 * This file contains the Cordis blocks and feeds alter hooks.
 */

/**
 * Implements hook_feeds_after_parse().
 */
function cordis_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == 'cordis') {
    foreach ($result->items as $id => &$item) {
      _cordis_mapping($item);
    }
  }
}

/**
 * Alters mappings for xpathparser in Cordis Importers.
 *
 * @param mixed $item
 *   Result item.
 */
function _cordis_mapping(&$item) {
  // Fix country codes.
  if (!empty($item['xpathparser:21'])) {
    $item['xpathparser:21'] = is_array($item['xpathparser:21']) ? $item['xpathparser:21'] : array($item['xpathparser:21']);
    foreach ($item['xpathparser:21'] as $key => $value) {
      $item['xpathparser:21'][$key] = _cordis_countries_deviations($value);
    }
  }

  $country_tid = _cordis_technical_fields_to_tid('field_country_iso_code', $item['xpathparser:21'], 'value', 'IN');

  if ($country_tid) {
    $item['xpathparser:21'] = $country_tid;
  }

  $item['xpathparser:22'] = 'http://cordis.europa.eu' . $item['xpathparser:22'];
}

/**
 * Tries to resolve each taxonomy term with a corresponding ID to map.
 *
 * @param string $field_name
 *   Field name.
 * @param string $field_value
 *   Field Value.
 *
 * @return array
 *   Term id array
 */
function _cordis_technical_fields_to_tid($field_name, $field_value, $type = 'tid', $qsel = 'IN') {

  $term_ids = array();

  if (!empty($field_value)) {
    if (is_array($field_value)) {
      $field_value = array_unique($field_value);
    }
    else {
      $field_value = array($field_value);
    }

    // Let us initiate term_ids to field value, in case we can't map it.
    $term_ids = array();

    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'taxonomy_term')
        ->fieldCondition($field_name, $type, $field_value, $qsel)
        ->execute();

    if (isset($result['taxonomy_term'])) {
      $term_ids = array_keys($result['taxonomy_term']);
    }
  }
  return $term_ids;
}

/**
 * Specific to Cordis as not respecting 100% the Iso standards.
 *
 * @param string $country
 *   Country code.
 */
function _cordis_countries_deviations($country) {
  switch ($country) {
    case 'EL':
      $country = 'GR';
      break;

    case 'UK':
      $country = 'GB';
      break;

  }
  return $country;
}

/**
 * Implements hook_feeds_plugins().
 */
function cordis_feeds_plugins() {
  $info = array();
  // A plugin needs to derive either directly or indirectly from FeedsFetcher,
  // FeedsParser or FeedsProcessor.
  $info['CordisFeedsNodeProcessor'] = array(
    'name' => 'Cordis node processor',
    'description' => 'Create and update Cordis projects (also across multiple importer instances without duplicated items)',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'CordisFeedsNodeProcessor',
      'file' => 'CordisFeedsNodeProcessor.inc',
      'path' => drupal_get_path('module', 'cordis') . '/plugins',
    ),
  );
  return $info;
}
