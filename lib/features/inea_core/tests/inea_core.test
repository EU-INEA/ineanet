<?php

/**
 * @file
 * Tests for inea_core.module.
 */

/**
 * Defines a base class for testing.
 */
class IneaQAWebTestCase extends DrupalWebTestCase {

  /**
   * Test definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'inea_core tests',
      'description' => 'Test the inea_core features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * TestFile inea_core.info file.
   */
  public function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information
    // Ex: package = Multisite_features.
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x.
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4.
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add feature information:
    // features[features_api][] = api:2.
    $this->assertEqual($info['features']['features_api'][0], 'api:2', 'The Feature API dependency is available.');

    // Remove menu dependencies.
    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu".
      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy".
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }

    // Remove tags taxonomy:
    // features[taxonomy][] = "tags".
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  /**
   * Test Install file.
   */
  public function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}
